1. Install depenadncies
2. Set up routes
3.Set up auto handling of routes
4. set up controllers
5. Set up database  : mongoose Schema
6. firebase admin tool : to get token from firebase verify them and store user in our own DB

7. fetch a post of the userIDToken when user logsIn. 
8. Grab the auth token

9. The auth middleware then validated the token and passes it to the controller , to save the user in our DATABASE


10. route protection for users


11. Roue protection for admin(importnt)


12. Before admin can create products , there must be categories and sub categories where admin can CRUD products.  
13. We will create some categories , categories schema , routes and controllers , to handle those routes. 

14. Create categorySchema : model

15. Routes and controllers
16. Category Controller: for CRUD functions in the server side

17. Then building them visually in the front end.


18. Creating Sub Category
i. Create SubCategory  ---- > Create routes 
ii . create controllers
iii. create functions for FE, to interact with the backend
1v. Create pages for FE/ create , list , remove , update sucategories
v. Process similar to that of creating categories

19. Product category : most important part : users can upload images of prodcuts based on categories andall... very exciting

steps:
i. Create prodcut model : title , slug , description , category (refer to category model , type : ObjectId) , price , subCategory (ref : SUBcategory model , type : ObectId) , Quantity: {inventory , and values will be resposnsive , that is less if chosen} ,Sold(qty : Number)
 Images : {
     type : Number
 } , 
 shipping : {
     type : true,
     enum : ['yes' , 'no]  //default value , as set to what we want and no other values
 }
 color : {
     typr : String,
     color : ['red' , 'black' , 'blue' , 'white' , 'brown']   
 } 
 Brand : { optiinal , I wil not do it}
 rating : [{
     star : Number,
     poetdBy : {type : ObjectId , ref : 'User'} // ref to the user model to save ghe details of the user who rated
 }]

 add time stamps too
 We will be uploading images in Cloudinary and save the URL generated in the IMages array in the product model


 20. create Routes 





 21. Create controllers , sowe can perform prodcut CRUD operations

 22. create product form : usual with the fileds
 22.i) Also include categories list (interact w the BE DB of categories)
 22.ii) Also include sub category list ( whivh is dependant on category ID)
 23.iii) Ccreatinh the sub category list is tricky : 
 - create a new end piint in the product route witha route /category/sub/_id
 - cerate a new controller that  takes the slu in the req.params._id and resturns the response , that is subcategpries in the id(id if the parent categpry is what we pass)


23. Create  a prodcut endpoint , to read all the products created


23. IMage upload
i. Sign up to cloudinary to get AAPI Key, Secret.
ii. Create endpoints, controllers , fro our server to upload and remove images to cloudinary
iii. Resize the images directly from FE,(to reduce the size and make data transfer faster) and send to our server
iv. Our server will upload those to cloudinary and recieve the iMage URL's in return
v. Those upoaded URL will be sent back to FE
vi. At this point , FE will haev images with upload URLs
vii. We can save the urls , in the image arrays , in our own database


24. After product upload with images is done :
i. get all products endpoint.
ii. Show the endpoints in a page (products)
iii. In a card , from ant design


25.Product Update 
i. To update a update a specific product we first hve to read that prodcuts based on id/slug
ii. Create a endpoint for reading
iii. Create a controller fro the read function 
iv. test the endpoint
v. Crate a function inthe FrntEnd wthat will intrect with withis endpoint

//Create  a reqsubale component called product Update 
//it will be pretty much same as product create , instead we will pre populate the fields with existing data , that admin used to create the product
// pre populating otehr data is easy
//Pre populating categories and sub categories is a little tricky but very function

steps for pre populating category:
i. Create a new state for categories
ii read the categoies when component mounts
iii. Update the categpris array with respomse.data from the server
iv. Pass the categories list as props from main component to cProduct Update form
v. At this point : categoires list will be available in the slect dropdwon
vi. To pre populate ,set the option to [category.name] => Resoonse from server after reading product based on id

After pre populating it is necessary to keep the categories and sub categories in sync:
steps:
i. In the update page , users can select any other category and choose sub categories based on that.
ii. But , upon returning to the previosly slected category while creating , the subcategories should be prepopulated